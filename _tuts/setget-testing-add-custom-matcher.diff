diff --git a/phpspec.yml b/phpspec.yml
index f4131ea..36dd76f 100644
--- a/phpspec.yml
+++ b/phpspec.yml
@@ -2,3 +2,6 @@ suites:
     default:
         namespace: App
         psr4_prefix: App
+
+matchers:
+    - spec\Matchers\BeGreaterMatcher
diff --git a/spec/Entity/DinosaurSpec.php b/spec/Entity/DinosaurSpec.php
index b30d11f..74877b2 100644
--- a/spec/Entity/DinosaurSpec.php
+++ b/spec/Entity/DinosaurSpec.php
@@ -46,4 +46,11 @@ class DinosaurSpec extends ObjectBehavior
 
         $this->getLength()->shouldReturn(9);
     }
+
+    function it_should_not_shrink()
+    {
+        $this->setLength(15);
+
+        $this->getLength()->shouldBeGreaterThan(12);
+    }
 }
diff --git a/spec/Matchers/BeGreaterMatcher.php b/spec/Matchers/BeGreaterMatcher.php
new file mode 100644
index 0000000..d076b3f
--- /dev/null
+++ b/spec/Matchers/BeGreaterMatcher.php
@@ -0,0 +1,69 @@
+<?php
+
+namespace spec\Matchers;
+
+use PhpSpec\Exception\Example\FailureException;
+use PhpSpec\Matcher\BasicMatcher;
+
+final class BeGreaterMatcher extends BasicMatcher
+{
+    /**
+     * @param mixed $subject
+     * @param array $arguments
+     *
+     * @return boolean
+     */
+    protected function matches($subject, array $arguments): bool
+    {
+        return $subject > $arguments[0];
+    }
+
+    /**
+     * @param string $name
+     * @param mixed $subject
+     * @param array $arguments
+     *
+     * @return FailureException
+     */
+    protected function getFailureException(string $name, $subject, array $arguments): FailureException
+    {
+        return new FailureException(sprintf(
+            'Expected %d to be greater than %d',
+            $subject,
+            $arguments[0]
+        ));
+    }
+
+    /**
+     * @param string $name
+     * @param mixed $subject
+     * @param array $arguments
+     *
+     * @return FailureException
+     */
+    protected function getNegativeFailureException(string $name, $subject, array $arguments): FailureException
+    {
+        return new FailureException(sprintf(
+            'Expected %d to not be greater than %d',
+            $subject,
+            $arguments[0]
+        ));
+    }
+
+    /**
+     * Checks if matcher supports provided subject and matcher name.
+     *
+     * @param string $name
+     * @param mixed $subject
+     * @param array $arguments
+     *
+     * @return Boolean
+     */
+    public function supports(string $name, $subject, array $arguments): bool
+    {
+        return \in_array($name, ['beGreater', 'beGreaterThan'], true)
+            && is_numeric($subject)
+            && \count($arguments) > 0
+            && is_numeric($arguments[0]);
+    }
+}
